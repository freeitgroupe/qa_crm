*****************************************************************************************
* Программирование на java с готовыми классами это уменее ставить точки на нужные места *
*****************************************************************************************
З-ны в программироваии
    (работает не трогай)
    что не сломано не чини
Книги	
	- Эккель (хорошо оисано о наследовании)
	- Шилдт
	- Седжвик
	- Modern C++ design - книга по паттернам проектировния
	
Философия Java	
	- В последней версии Java нет javafx, на ней пишут под Android
	
Что такое Java (Основы языка)
	- Написана на C, С++
	
	- Задумывался как простой язык программирования (суть про технологию)
	
	- Заимствует базу языка C
	
	- При работе с памятью в Jave нет указателей как в C, (ими нельзя пользоваться)
	
	- В Jave мы размещаем объекты в памяти, освобождением памяти занимается GC (Garbage Collection), но gc помогает только в правильно написанной программе, а кривой код остается кривым. 
	Момент в том, что там где программист перестает контролировать ситуацию наиболее вероятно можно допустить ошибку.
	
	- Нет хедер файлов(файлов зголовочный) и команд препроцессора (Define, include и др.). Как же собрать программу на джаве если нет heder файлов?? Программа на джаве состоит из папок так называемых
	package в которых находятся файлы java c классами(один файл-один класс). Если название классов совпадает с названием пэкеджей то их нзвание должны совпадать в плоть до регистра.
	
	- Почему нельзя создать два класса с одинаковыми названиями? Так как классы задваятся и поэтому классы с одинаковыми именами распологаются в разных пэкеджах.

	- Что значит медленно работает современная программа? 
		они плохо работают с кэшем; 
		сборка мусора отнимает много ресурсов.
	
	- JNI (Java native interface) возможность встраивания кода на C и С++
	
	- В Java практически все объекты (кроме дата типов)
	
	- Язык программирования распределенный и кроссплатформенный. Есть возможность напрямую работать с сетью и интернетом. Есть возможность использовать удаленные объекты(клиент серверная структура, где на сервере может крутиться сложная математика а клиент получает результат работы вычеслений).
	
	- Язык java интерпретируемый а java compilar компилирует код в байткод и затем исполняется JVM (java virtual machine).
	
	- Язык джава надежный (Если код написанный правильно и коректно то он будет работать). Но могут возникать исключения. Почему нельзя предусмотреть возникновения всех исключений? Так как исключение может вызвать исключение и это приведет к бесконечной рекурсии. 
	
	- Язык джава безопасный (будет всегда корректно работать при любых обращениях к памяти). Джава машина будет сама следить чтобы ваша программа работала корректно и без сбоев.
	
	- JDK (java development kit) содержит в себе виртуальную машину так и средство для разработки
	
	- Код на джава производительный (код на джава постоянно оптимизируется прям в время исполнения)
	
	-   volatile int x = 10;
		....
		....
		if(x==5){}
	
	if(x==5){} - при оптимизации это часть кода может иcчезнуть поэтому надо обязательно прописать volatile  
	
	- Так нельзя писать 
		for(int i = 0; ...)
				for(j = 0; ...) так как постоянно будет счетчик создаваться и уничтожаться
				
	- Код на джава динамичный. Код на джава можно менять пряямо во время выполнения программы.

	- В отличии от C, в java может быть несколько main, а главный остается тот который находится в главном файле с которого начинается выполнение программы. Это сделано для проверки библиотек. К main обратиться нельзя и вызвать его тоже нельзя.
	
	- Программа на java - 
		это папки и файлы.
	

Java ООП
	ООП -
	    Держится на трех столпах - инкапсуляция, наследования, полиморфизм.
		В основу положено понимание класса.
	
	Класс -
		это тип данных, которые состоит из полей и методов.

	Класс родительский (суппер класс (super class)) -
	    класс от которого наследуемся

	Класс дочерний (подкласс (sub class)) -
	    класс который наследует

		
	Класс утилита - 
		который содержит вспомогательные команды и конструкции для основной логики кода.
		работа с массивами, датами, случайными числами и др.
	
	Объект -
		то что создается на основе классов. Наделен всеми чертами класса.
		Объект наделен только тем поведением которым наделен класс, которому он принадлежит.
		
	Класс по отношению к объекту -	
		Описывает логику и поведение объекта. Описывает все что будет уметь объект.
	
	Поведение объекта (что они имеют) - 
		это набор методов, которыми мы можем пользоваться
		
	Логика объекта (как они имеют) - 
		то как реализованы эти методы (сам код)

	Разное в объектах - 
		Данные с которыми работают данные методы.
	
	Как создается объект ?
		Выделяется место в оперативной памяти под объект и затем вызывается конструктор.

	свойство класса -
	    комбинаация поля + сеттеров + геттеров нзывается полем.
	
	Конструктор -
		специальный метод класса, его нельзя вызвать, отвечающий за инициализацию объект при его создании.
		Конструктор ничего не создает, а инициализирует объект класса.
		Консруктор вызывает автоматика языка.
		Если мы не объявили конструктор, то он вызовится по умолчанию, так как это правило создания объекта.
	
	Конструктор умолчаний - 
		задается программистом.
		не имеет аргументов и задает значение элементов по умолчанию.
		
	Конструктор поумолчанию - 
		не имеет аргументов и создается автоматически если вы свой коструктор не создали.
		Добавляется для того чтобы процесс создания объектов был всегда одинаков
		
	Конструктор полный -
		который задает все поля конкретными указанными значениями
		
	Перегрузка метода - 
		Методы с одинаковым именем но с разной сигнатурой.
		
		
	Инкапсуляция (сокрытие кода) - 
		Закрытие кода от потребителя, снижаем нагрузку на программиста (некоторые моменты библиотек не нужны программистам).
		Определяем структуру нашего кода и то как будут работать с ним программисты.
		Изначальное значение слова «инкапсуляция» в программировании — объединение данных и методов работы с этими данными в одной упаковке («капсуле»).
		В Java в роли упаковки-капсулы выступает класс. Класс содержит в себе и данные (поля класса), и методы для работы с этими данными. 
	
	public -
		открытые элементы класса
		
	private - 
		закрытые элементы класса (можно обрщаться тольк в коде класса)
		
	protected - 
		собственно существует для наследования
	
	<none> (если не указано) - 
		по умолчанию private + package (т.е видно по всему package)
		
	Принцип KISS (для «Keep it simple, stupid» — «Делай проще, тупица»)	-
		- создали объект в main 
		- передали в него данные
		- получили ответ
	 
	В чем разница м-у структурами и классами - 
		Структуры нельзя защитить.
		
	- В Java все построено на основании одного общего класса object. Реал изует важнейшие системные методы, который должен наследовать каждый класс или он не сможет работать.
		
	Важнейшие методы класса Object -
		
		protected Object clone() - 
			копирует объект.
		
		boolean equals(Object obj) - 
			позволяет сравнивать содержание объектов класса, сравнивает содержиме а не ссылки, так как объекты могут быть разные.
		
		protected void finalize() - 
			описывает процесс удаление объектов в памяти  
		
		Class getClass() - 
			этот метод позволяет использовать рефлексию. Рефлексия позволяет все узнать о классе (через специальные классы класс, метод, поле). Системный метод, который позволяет получить служебную информцию о классе без доступа к этому классу.
		
		int hashCode() - 
			Хэш множество удобный способ организовать хранение и поиск этих данных.
			Возвращает что то типа "адреса" объекта в памяти, java хранит объекты в памяти не по адресам а по хеш коду.
			jvm сама работает с памятью и ей так удобно.
		String toString() - 
	
	Как передаются Дататипы, обертки над ними и строки - 
		передаются как копии, считются полноценными локальными переменными, все остальное в джаве передается по ссылкам.
		
	Как передаются объекты - 
		Передаются по ссылкам. Если поменяли в одном месте то поменяли во всей программе
		
	Java удаление объекта - 
		происходит неявно, когда сборщик мусора обнаружит, что на него не осталось ссылок. Тогда он вызовет у него finalize(), но когда именно это произойдет и произойдет ли вообще, система не гарантирует.
		
	Статические данные (поля) - 
		это данные, у которых большое время жизни (хранятся в оперативной памяти в одном экземпляре). 
		Помогают экономить память.
		Статические поля уничтожаются по оканчанию работы программы.
		Статические поля привязаны к классу
		Нельзя сказать чтоони хранятся в классе так как класс в jave загружается в оперативную память принудительно
		Часто используются для объявления счетчиков
		
	Статические методы - 
		Статические методы нужны для работы со статическими полями и состатическими методами.
		Например используются  для работы сосчетчиками
	
	Статик блок - 
		срабатывает только один раз и только при первом обращении к классу
	
	Рефлексия - 
		принудительно загружаем код класса в оперативную память.
		Можем узнать информацию о классе методы, поля, конструкторы, константы, суперклассы, реализуемые классом интерфейсы.
		Например необходимо при подключениик базам данных.
		Например: Class.forName("lectures.lecture_1.javaapplication9.Point2D");
	
	Анонимные объекты -
		В чем их преимущества? в том что у них нет имени и соответственно ссылки и gc их удаляет сразу когда они перестают быть нужны.
		Он создается на момент вызова метода и ссылка на него будет только внутри метода и как только метод завершит работу и вы вернетесь в точку вызова анонимный объект будет уничтожен.

	Анонимный массив -
	    new String [] {'a', 'b', 'c'} -

Java наследвание, полиморфизм
    Как можно построить новый класс на основе старого (есть 2 подхода)?
        - агрегирование (новый класс содержит поля типа старого класса). В наш новый класс добавляем старые классы как объекты, если
            эти классы яв-ся инструментом для нового класса
            (Программируем журнал оценок для учеников. Есть класс ученик то оценки будут храниться как экземпляры класса оценка)

        - наследование (наследоваться можно только раз)
          Если один класс продолжает логику второго класса
          (класс кнопки с текстом, можно расширить классом который будет формироваьт кнопку с рисунком)


    Разница м-у агрегированием и наследовнием в том что при агрегировании один класс служит инструментом для второго класса, при
    наследовании один класс яв-ся частью логики второго класса.

    Что такое развитие класса ?
    Как правильнонаследоваться ?
        Родительский класс может как упрощать класс так и усложнять. Проще унаследовться от 3-х мерной точки и создать 2-х мерную
	
	В Java запрещено множественное наследованиеи для решения некоторых проблем существуют интерфейсы(где можно описать методы)
	в которох до 8 - й версии нельзя	было прописать реализацию методов.
	В 8-й джаве добавили  ключевое слово Default и в интерфейсах появилась.
	возможность программировть методы и мы вернулись к проблеме ромбовидному наследованию




	alt + ins - автогенерация кода
	
	
	
	
	
	
	
	
	
	-