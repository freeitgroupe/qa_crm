++Рефакторинг улучшаем читаемость кода, выделяем вспомогательные методы++
Выполним рефакторинг кода, а имено для логирования создадим отдельный метод
login().
==
Далее структуррируем метод теста, разбив порядок действий на отдельные методы
с помощью рефакторинга, тем самым мы спрячем технические детали и понятным языком
распишим методы, чтобы было понятно какой метод и за что отвечает.
Выделяем часть кода и нажимаем на клавиатуре ctrl+alt+m
    gotoGroupPage();
    initGroupCreation();
    fillGroupForm();
    submitGroupCreation();
    returnToGroupPage();
    logout();
Отметим, что первый механизм рефакторинга это
выделение вспомогательных методов.
===
Далее займемся рефакторингом наших методов
и выделим параметры которые можно передать в метод. для рефакторинга выделим
параметр "admin" в строке - driver.findElement(By.name("user")).sendKeys("admin");
и нажмем сочетание клавишь  ctrl + alt + p и введем наш параметр user. В итоге получаем
driver.findElement(By.name("user")).sendKeys(user);
и соответветственно передаем эти параметры в метод.

login("admin", "secret");
Теперь хорошо видно с какими данными
осуществляется вход в системе и метод login стал универсальный
===
Перейдем к методу fillGroupForm(param1, param2, ...param n)
после рефакторинга мы имеем много передаваемых значений в данный метод,
лучше объеденить передававаемые значения одним объектом с атрибутами которые
необходимо передать. Т.е. нам необходимо создать вспомогательный класс который описывает
объекты типа Group.

МЫ это также можем сделать при помощи рефакторинга, ПКМ по методу fillGroupForm->
Extract -> Parametr Object, прописываем имя отмечаем значения которые
должны быть объеденены.
===
